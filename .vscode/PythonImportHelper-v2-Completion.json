[
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "phonenumbers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "geocoder",
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "isExtraImport": true,
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "carrier",
        "importPath": "phonenumbers",
        "description": "phonenumbers",
        "isExtraImport": true,
        "detail": "phonenumbers",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Library",
        "kind": 6,
        "importPath": "book_lend_system.library_class",
        "description": "book_lend_system.library_class",
        "peekOfCode": "class Library:\n    _book_list = []\n    @classmethod\n    def entry_book(cls, book):\n        cls._book_list.append(book)\n    @classmethod\n    def view_all_books(cls):\n        if not cls._book_list:\n            print(\"No books available in the library.\")\n        else:",
        "detail": "book_lend_system.library_class",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "book_lend_system.library_class",
        "description": "book_lend_system.library_class",
        "peekOfCode": "class Book:\n    def __init__(self, book_id, title, author):\n        self._book_id = book_id\n        self._title = title\n        self._author = author\n        self._availability = True\n        Library.entry_book(self)\n    def borrow_book(self):\n        if self._availability:\n            self._availability = False",
        "detail": "book_lend_system.library_class",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "book_lend_system.library_class",
        "description": "book_lend_system.library_class",
        "peekOfCode": "def main():\n    Book(\"100\", \"Introduction to Python Programming\", \"Guido van Rossum\")\n    Book(\"101\", \"Introduction to C++\", \"Bjarne Stroustrup\")\n    Book(\"102\", \"Javascript & Modern Web\", \"Brendan Eich\")\n    while True:\n        print(\"\\nLibrary Menu:\")\n        print(\"1. View All Books\")\n        print(\"2. Borrow Book\")\n        print(\"3. Return Book\")\n        print(\"4. Exit\")",
        "detail": "book_lend_system.library_class",
        "documentation": {}
    },
    {
        "label": "good_sequence",
        "kind": 2,
        "importPath": "codeforces_problem.good_sequence",
        "description": "codeforces_problem.good_sequence",
        "peekOfCode": "def good_sequence():\n    N = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    removals = 0",
        "detail": "codeforces_problem.good_sequence",
        "documentation": {}
    },
    {
        "label": "split_balanced_strings",
        "kind": 2,
        "importPath": "codeforces_problem.max_split",
        "description": "codeforces_problem.max_split",
        "peekOfCode": "def split_balanced_strings():\n    S = input().strip()\n    count = 0\n    balance = 0\n    balanced_strings = []\n    current = \"\"\n    for char in S:\n        current += char\n        if char == 'L':\n            balance += 1",
        "detail": "codeforces_problem.max_split",
        "documentation": {}
    },
    {
        "label": "max_operations",
        "kind": 2,
        "importPath": "codeforces_problem.minimize_number",
        "description": "codeforces_problem.minimize_number",
        "peekOfCode": "def max_operations():\n    N = int(input())\n    A = list(map(int, input().split()))\n    operations = 0\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        operations += 1\n    print(operations)\nmax_operations()",
        "detail": "codeforces_problem.minimize_number",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "codeforces_problem.pyramid_py_auto_gui",
        "description": "codeforces_problem.pyramid_py_auto_gui",
        "peekOfCode": "num = 6\ntime.sleep(2)\nfor row in range(num):\n    for col in range(row + 1):\n        pyautogui.typewrite('#', interval=0.1)\n    pyautogui.press('enter')",
        "detail": "codeforces_problem.pyramid_py_auto_gui",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "codeforces_problem.tempCodeRunnerFile",
        "description": "codeforces_problem.tempCodeRunnerFile",
        "peekOfCode": "num = 5\n# for row in range(num):\n#     for col in range(row+1):\n#         print('#', end='')\n#     print()",
        "detail": "codeforces_problem.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "print_diamond",
        "kind": 2,
        "importPath": "day1.print_pattern",
        "description": "day1.print_pattern",
        "peekOfCode": "def print_diamond(n):\n    for i in range(1, n + 1):\n        print(\" \" * (n - i) + \"#\" * (2 * i - 1))\n    for i in range(n - 1, 0, -1):\n        print(\" \" * (n - i) + \"#\" * (2 * i - 1))\nn = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.print_pattern",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "day1.print_pattern",
        "description": "day1.print_pattern",
        "peekOfCode": "n = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.print_pattern",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "day1.tempCodeRunnerFile",
        "description": "day1.tempCodeRunnerFile",
        "peekOfCode": "n = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "swap_array",
        "kind": 2,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "def swap_array(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\nmy_array = [1, 2, 3, 4, 5, 6]\nswap_array(my_array)\n# print(my_array)\nmy_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "my_array",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "my_array = [1, 2, 3, 4, 5, 6]\nswap_array(my_array)\n# print(my_array)\nmy_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "my_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "word_to_check",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "word_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "sum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "calculate_distance",
        "kind": 2,
        "importPath": "leap_year_plus_another.distance",
        "description": "leap_year_plus_another.distance",
        "peekOfCode": "def calculate_distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nprint(\"Enter the co-ordinates of two points:\")\nx1, y1 = map(float, input(\"Point 1 (x1 y1): \").split())\nx2, y2 = map(float, input(\"Point 2 (x2 y2): \").split())\ndistance = calculate_distance(x1, y1, x2, y2)\nprint(f\"Distance: {distance:.2f}\")",
        "detail": "leap_year_plus_another.distance",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "leap_year_plus_another.distance",
        "description": "leap_year_plus_another.distance",
        "peekOfCode": "distance = calculate_distance(x1, y1, x2, y2)\nprint(f\"Distance: {distance:.2f}\")",
        "detail": "leap_year_plus_another.distance",
        "documentation": {}
    },
    {
        "label": "is_leap_year",
        "kind": 2,
        "importPath": "leap_year_plus_another.leap_year",
        "description": "leap_year_plus_another.leap_year",
        "peekOfCode": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:",
        "detail": "leap_year_plus_another.leap_year",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "leap_year_plus_another.leap_year",
        "description": "leap_year_plus_another.leap_year",
        "peekOfCode": "year = int(input(\"Enter a year: \"))\nif is_leap_year(year):\n    print(f\"{year} is a leap year.\")\nelse:\n    print(f\"{year} is not a leap year.\")",
        "detail": "leap_year_plus_another.leap_year",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "leap_year_plus_another.positive_number",
        "description": "leap_year_plus_another.positive_number",
        "peekOfCode": "number = int(input(\"Enter a number: \"))\nif number > 0:\n    print(f\"{number} is a positive number.\")\nelif number < 0:\n    print(f\"{number} is a negative number.\")\nelse:\n    print(\"The number is zero.\")",
        "detail": "leap_year_plus_another.positive_number",
        "documentation": {}
    },
    {
        "label": "is_leap_year",
        "kind": 2,
        "importPath": "leap_year_plus_another.tempCodeRunnerFile",
        "description": "leap_year_plus_another.tempCodeRunnerFile",
        "peekOfCode": "def is_leap_year(year):\n#     if year % 4 == 0:\n#         if year % 100 == 0:\n#             if year % 400 == 0:\n#                 return True\n#             else:\n#                 return False\n#         else:\n#             return True\n#     else:",
        "detail": "leap_year_plus_another.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "class Phone:\n    price = 12000\n    color = 'blue'\n    brand = 'samsung'\n    features = ['camera', 'speaker', 'hammer']\n    def call(self):\n        print('calling one person')\n    def send_sms(self, phone, sms):\n        text = f'sending SMS to: {phone} and message: {sms}'\n        return text",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "def call():\n    print('calling someone i dont know')\n    return 'call done'\nclass Phone:\n    price = 12000\n    color = 'blue'\n    brand = 'samsung'\n    features = ['camera', 'speaker', 'hammer']\n    def call(self):\n        print('calling one person')",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "my_phone",
        "kind": 5,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "my_phone = Phone()\nprint(my_phone.features)\nmy_phone.call()\nres = my_phone.send_sms(17, 'hello monirul')\nprint(res)",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "res = my_phone.send_sms(17, 'hello monirul')\nprint(res)",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "oop.class_object.simple_class",
        "description": "oop.class_object.simple_class",
        "peekOfCode": "class Phone:\n    price = 5000\n    color = 'blue'\n    brand = 'samsung'\nmy_phone = Phone()\nprint(my_phone.price)",
        "detail": "oop.class_object.simple_class",
        "documentation": {}
    },
    {
        "label": "my_phone",
        "kind": 5,
        "importPath": "oop.class_object.simple_class",
        "description": "oop.class_object.simple_class",
        "peekOfCode": "my_phone = Phone()\nprint(my_phone.price)",
        "detail": "oop.class_object.simple_class",
        "documentation": {}
    },
    {
        "label": "track_phone_number",
        "kind": 2,
        "importPath": "restaurant_management.location",
        "description": "restaurant_management.location",
        "peekOfCode": "def track_phone_number(phone_number):\n    try:\n        # Parse phone number\n        parsed_number = phonenumbers.parse(phone_number)\n        # Get location\n        location = geocoder.description_for_number(parsed_number, 'en')\n        # Get carrier info\n        carrier_info = carrier.name_for_number(parsed_number, 'en')\n        return {\n            \"Location\": location,",
        "detail": "restaurant_management.location",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "restaurant_management.location",
        "description": "restaurant_management.location",
        "peekOfCode": "number = input(\"Enter the phone number (with country code): \")\nresult = track_phone_number(number)\nprint(result)",
        "detail": "restaurant_management.location",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "restaurant_management.location",
        "description": "restaurant_management.location",
        "peekOfCode": "result = track_phone_number(number)\nprint(result)",
        "detail": "restaurant_management.location",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "class Customer:\n    def __init__(self, name, email, address):\n        self.name = name\n        self.email = email\n        self.address = address\n        self.balance = 0\n        self.orders = []\n    def check_balance(self):\n        print(f\"Your current balance is: ${self.balance}\")\n    def add_funds(self):",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "class Admin:\n    def __init__(self, restaurant):\n        self.restaurant = restaurant\n    def add_customer(self):\n        name = input(\"Enter customer name: \")\n        email = input(\"Enter customer email: \")\n        address = input(\"Enter customer address: \")\n        customer = Customer(name, email, address)\n        self.restaurant.add_customer(customer)\n        print(f\"Customer {name} added successfully.\")",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "Restaurant",
        "kind": 6,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "class Restaurant:\n    def __init__(self):\n        self.menu = {}\n        self.customers = []\n    def manage_menu(self, item, price=None):\n        if price is None:\n            if item in self.menu:\n                del self.menu[item]\n                print(f\"Item '{item}' removed from menu.\")\n            else:",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "def main_menu():\n    restaurant = Restaurant()\n    admin = Admin(restaurant)\n    customer = None\n    while True:\n        print(\"\\n--- Restaurant Management System ---\")\n        print(\"1. Admin Login\")\n        print(\"2. Customer Login\")\n        print(\"3. Exit\")\n        choice = input(\"Enter your choice: \")",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    }
]