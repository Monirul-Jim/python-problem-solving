[
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "binary_search_logest.binary_search",
        "description": "binary_search_logest.binary_search",
        "peekOfCode": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1",
        "detail": "binary_search_logest.binary_search",
        "documentation": {}
    },
    {
        "label": "length_of_longest_substring",
        "kind": 2,
        "importPath": "binary_search_logest.longest_permutation",
        "description": "binary_search_logest.longest_permutation",
        "peekOfCode": "def length_of_longest_substring(s):\n    char_set = set()\n    left = 0\n    max_length = 0\n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_length = max(max_length, right - left + 1)",
        "detail": "binary_search_logest.longest_permutation",
        "documentation": {}
    },
    {
        "label": "generate_permutations",
        "kind": 2,
        "importPath": "binary_search_logest.string_permutation",
        "description": "binary_search_logest.string_permutation",
        "peekOfCode": "def generate_permutations(s):\n    return sorted([\"\".join(p) for p in permutations(s)])\ns = input(\"Enter string: \")\nprint(\" \".join(generate_permutations(s)))",
        "detail": "binary_search_logest.string_permutation",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "binary_search_logest.string_permutation",
        "description": "binary_search_logest.string_permutation",
        "peekOfCode": "s = input(\"Enter string: \")\nprint(\" \".join(generate_permutations(s)))",
        "detail": "binary_search_logest.string_permutation",
        "documentation": {}
    },
    {
        "label": "Library",
        "kind": 6,
        "importPath": "book_lend_system.library_class",
        "description": "book_lend_system.library_class",
        "peekOfCode": "class Library:\n    _book_list = []\n    @classmethod\n    def entry_book(cls, book):\n        cls._book_list.append(book)\n    @classmethod\n    def view_all_books(cls):\n        if not cls._book_list:\n            print(\"No books available in the library.\")\n        else:",
        "detail": "book_lend_system.library_class",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "book_lend_system.library_class",
        "description": "book_lend_system.library_class",
        "peekOfCode": "class Book:\n    def __init__(self, book_id, title, author):\n        self._book_id = book_id\n        self._title = title\n        self._author = author\n        self._availability = True\n        Library.entry_book(self)\n    def borrow_book(self):\n        if self._availability:\n            self._availability = False",
        "detail": "book_lend_system.library_class",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "book_lend_system.library_class",
        "description": "book_lend_system.library_class",
        "peekOfCode": "def main():\n    Book(\"100\", \"Introduction to Python Programming\", \"Guido van Rossum\")\n    Book(\"101\", \"Introduction to C++\", \"Bjarne Stroustrup\")\n    Book(\"102\", \"Javascript & Modern Web\", \"Brendan Eich\")\n    while True:\n        print(\"\\nLibrary Menu:\")\n        print(\"1. View All Books\")\n        print(\"2. Borrow Book\")\n        print(\"3. Return Book\")\n        print(\"4. Exit\")",
        "detail": "book_lend_system.library_class",
        "documentation": {}
    },
    {
        "label": "good_sequence",
        "kind": 2,
        "importPath": "codeforces_problem.good_sequence",
        "description": "codeforces_problem.good_sequence",
        "peekOfCode": "def good_sequence():\n    N = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    removals = 0",
        "detail": "codeforces_problem.good_sequence",
        "documentation": {}
    },
    {
        "label": "split_balanced_strings",
        "kind": 2,
        "importPath": "codeforces_problem.max_split",
        "description": "codeforces_problem.max_split",
        "peekOfCode": "def split_balanced_strings():\n    S = input().strip()\n    count = 0\n    balance = 0\n    balanced_strings = []\n    current = \"\"\n    for char in S:\n        current += char\n        if char == 'L':\n            balance += 1",
        "detail": "codeforces_problem.max_split",
        "documentation": {}
    },
    {
        "label": "max_operations",
        "kind": 2,
        "importPath": "codeforces_problem.minimize_number",
        "description": "codeforces_problem.minimize_number",
        "peekOfCode": "def max_operations():\n    N = int(input())\n    A = list(map(int, input().split()))\n    operations = 0\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        operations += 1\n    print(operations)\nmax_operations()",
        "detail": "codeforces_problem.minimize_number",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "codeforces_problem.pyramid_py_auto_gui",
        "description": "codeforces_problem.pyramid_py_auto_gui",
        "peekOfCode": "num = 6\ntime.sleep(2)\nfor row in range(num):\n    for col in range(row + 1):\n        pyautogui.typewrite('#', interval=0.1)\n    pyautogui.press('enter')",
        "detail": "codeforces_problem.pyramid_py_auto_gui",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "codeforces_problem.tempCodeRunnerFile",
        "description": "codeforces_problem.tempCodeRunnerFile",
        "peekOfCode": "num = 5\n# for row in range(num):\n#     for col in range(row+1):\n#         print('#', end='')\n#     print()",
        "detail": "codeforces_problem.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "is_valid_code",
        "kind": 2,
        "importPath": "code_validation.code_validation",
        "description": "code_validation.code_validation",
        "peekOfCode": "def is_valid_code(S):\n    if len(S) == 7 and S[0] == '#':\n        for char in S[1:]:\n            if not (char.isdigit() or char.lower() in 'abcdef'):\n                return False\n        return True\n    return False\nS = input(\"Enter string: \")\nif is_valid_code(S):\n    print(\"true\")",
        "detail": "code_validation.code_validation",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "code_validation.code_validation",
        "description": "code_validation.code_validation",
        "peekOfCode": "S = input(\"Enter string: \")\nif is_valid_code(S):\n    print(\"true\")\nelse:\n    print(\"false\")",
        "detail": "code_validation.code_validation",
        "documentation": {}
    },
    {
        "label": "can_form_consecutive",
        "kind": 2,
        "importPath": "code_validation.consecutive_number",
        "description": "code_validation.consecutive_number",
        "peekOfCode": "def can_form_consecutive(N, M):\n    if N <= 1:\n        return True\n    M.sort()\n    for i in range(1, N):\n        if M[i] != M[i - 1] + 1:\n            return False\n    return True\nN = int(input())\nM = list(map(int, input().split()))",
        "detail": "code_validation.consecutive_number",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "code_validation.consecutive_number",
        "description": "code_validation.consecutive_number",
        "peekOfCode": "N = int(input())\nM = list(map(int, input().split()))\nif can_form_consecutive(N, M):\n    print(\"true\")\nelse:\n    print(\"false\")",
        "detail": "code_validation.consecutive_number",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "code_validation.consecutive_number",
        "description": "code_validation.consecutive_number",
        "peekOfCode": "M = list(map(int, input().split()))\nif can_form_consecutive(N, M):\n    print(\"true\")\nelse:\n    print(\"false\")",
        "detail": "code_validation.consecutive_number",
        "documentation": {}
    },
    {
        "label": "sum_of_even_numbers",
        "kind": 2,
        "importPath": "code_validation.some_of_even_number",
        "description": "code_validation.some_of_even_number",
        "peekOfCode": "def sum_of_even_numbers(numbers):\n    even_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n    return even_sum\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = sum_of_even_numbers(my_list)\nprint(\"Sum of even numbers:\", result)",
        "detail": "code_validation.some_of_even_number",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "code_validation.some_of_even_number",
        "description": "code_validation.some_of_even_number",
        "peekOfCode": "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = sum_of_even_numbers(my_list)\nprint(\"Sum of even numbers:\", result)",
        "detail": "code_validation.some_of_even_number",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "code_validation.some_of_even_number",
        "description": "code_validation.some_of_even_number",
        "peekOfCode": "result = sum_of_even_numbers(my_list)\nprint(\"Sum of even numbers:\", result)",
        "detail": "code_validation.some_of_even_number",
        "documentation": {}
    },
    {
        "label": "print_diamond",
        "kind": 2,
        "importPath": "day1.print_pattern",
        "description": "day1.print_pattern",
        "peekOfCode": "def print_diamond(n):\n    for i in range(1, n + 1):\n        print(\" \" * (n - i) + \"#\" * (2 * i - 1))\n    for i in range(n - 1, 0, -1):\n        print(\" \" * (n - i) + \"#\" * (2 * i - 1))\nn = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.print_pattern",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "day1.print_pattern",
        "description": "day1.print_pattern",
        "peekOfCode": "n = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.print_pattern",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "day1.tempCodeRunnerFile",
        "description": "day1.tempCodeRunnerFile",
        "peekOfCode": "n = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "swap_array",
        "kind": 2,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "def swap_array(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\nmy_array = [1, 2, 3, 4, 5, 6]\nswap_array(my_array)\n# print(my_array)\nmy_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "my_array",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "my_array = [1, 2, 3, 4, 5, 6]\nswap_array(my_array)\n# print(my_array)\nmy_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "my_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "word_to_check",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "word_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "sum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "reverse_string",
        "kind": 2,
        "importPath": "day3.string_reverse",
        "description": "day3.string_reverse",
        "peekOfCode": "def reverse_string(s):\n    return s[::-1]\n# Example usage\nstring = \"hello\"\nreversed_string = reverse_string(string)\nprint(f\"Original string: {string}\")\nprint(f\"Reversed string: {reversed_string}\")",
        "detail": "day3.string_reverse",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "day3.string_reverse",
        "description": "day3.string_reverse",
        "peekOfCode": "string = \"hello\"\nreversed_string = reverse_string(string)\nprint(f\"Original string: {string}\")\nprint(f\"Reversed string: {reversed_string}\")",
        "detail": "day3.string_reverse",
        "documentation": {}
    },
    {
        "label": "reversed_string",
        "kind": 5,
        "importPath": "day3.string_reverse",
        "description": "day3.string_reverse",
        "peekOfCode": "reversed_string = reverse_string(string)\nprint(f\"Original string: {string}\")\nprint(f\"Reversed string: {reversed_string}\")",
        "detail": "day3.string_reverse",
        "documentation": {}
    },
    {
        "label": "swap_variables",
        "kind": 2,
        "importPath": "day3.swap",
        "description": "day3.swap",
        "peekOfCode": "def swap_variables(a, b):\n    a = a + b\n    b = a - b\n    a = a - b\n    return a, b\n# Example usage\nx = 10\ny = 5\nprint(f\"Before swapping: x = {x}, y = {y}\")\nx, y = swap_variables(x, y)",
        "detail": "day3.swap",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "day3.swap",
        "description": "day3.swap",
        "peekOfCode": "x = 10\ny = 5\nprint(f\"Before swapping: x = {x}, y = {y}\")\nx, y = swap_variables(x, y)\nprint(f\"After swapping: x = {x}, y = {y}\")",
        "detail": "day3.swap",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "day3.swap",
        "description": "day3.swap",
        "peekOfCode": "y = 5\nprint(f\"Before swapping: x = {x}, y = {y}\")\nx, y = swap_variables(x, y)\nprint(f\"After swapping: x = {x}, y = {y}\")",
        "detail": "day3.swap",
        "documentation": {}
    },
    {
        "label": "sentence",
        "kind": 5,
        "importPath": "findword.reverse_word",
        "description": "findword.reverse_word",
        "peekOfCode": "sentence = input('Enter a sentence : ')\nwords = sentence.split()\nreversed_word = [word[::-1] for word in words]\nresult = ' '.join(reversed_word)\nprint(result)",
        "detail": "findword.reverse_word",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "findword.reverse_word",
        "description": "findword.reverse_word",
        "peekOfCode": "words = sentence.split()\nreversed_word = [word[::-1] for word in words]\nresult = ' '.join(reversed_word)\nprint(result)",
        "detail": "findword.reverse_word",
        "documentation": {}
    },
    {
        "label": "reversed_word",
        "kind": 5,
        "importPath": "findword.reverse_word",
        "description": "findword.reverse_word",
        "peekOfCode": "reversed_word = [word[::-1] for word in words]\nresult = ' '.join(reversed_word)\nprint(result)",
        "detail": "findword.reverse_word",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "findword.reverse_word",
        "description": "findword.reverse_word",
        "peekOfCode": "result = ' '.join(reversed_word)\nprint(result)",
        "detail": "findword.reverse_word",
        "documentation": {}
    },
    {
        "label": "some_word",
        "kind": 5,
        "importPath": "findword.word",
        "description": "findword.word",
        "peekOfCode": "some_word = 'how are you'\nword = 'h'\nif word in some_word:\n    print(True)\nelse:\n    print(False)",
        "detail": "findword.word",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": "findword.word",
        "description": "findword.word",
        "peekOfCode": "word = 'h'\nif word in some_word:\n    print(True)\nelse:\n    print(False)",
        "detail": "findword.word",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "findword.word_string",
        "description": "findword.word_string",
        "peekOfCode": "user_input = input('Enter your word : ')\nfor r in range(1, len(user_input)+1):\n    combs = combinations(user_input, r)\n    for comb in combs:\n        print(''.join(comb))",
        "detail": "findword.word_string",
        "documentation": {}
    },
    {
        "label": "calculate_distance",
        "kind": 2,
        "importPath": "leap_year_plus_another.distance",
        "description": "leap_year_plus_another.distance",
        "peekOfCode": "def calculate_distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nprint(\"Enter the co-ordinates of two points:\")\nx1, y1 = map(float, input(\"Point 1 (x1 y1): \").split())\nx2, y2 = map(float, input(\"Point 2 (x2 y2): \").split())\ndistance = calculate_distance(x1, y1, x2, y2)\nprint(f\"Distance: {distance:.2f}\")",
        "detail": "leap_year_plus_another.distance",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "leap_year_plus_another.distance",
        "description": "leap_year_plus_another.distance",
        "peekOfCode": "distance = calculate_distance(x1, y1, x2, y2)\nprint(f\"Distance: {distance:.2f}\")",
        "detail": "leap_year_plus_another.distance",
        "documentation": {}
    },
    {
        "label": "is_leap_year",
        "kind": 2,
        "importPath": "leap_year_plus_another.leap_year",
        "description": "leap_year_plus_another.leap_year",
        "peekOfCode": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:",
        "detail": "leap_year_plus_another.leap_year",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "leap_year_plus_another.leap_year",
        "description": "leap_year_plus_another.leap_year",
        "peekOfCode": "year = int(input(\"Enter a year: \"))\nif is_leap_year(year):\n    print(f\"{year} is a leap year.\")\nelse:\n    print(f\"{year} is not a leap year.\")",
        "detail": "leap_year_plus_another.leap_year",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "leap_year_plus_another.positive_number",
        "description": "leap_year_plus_another.positive_number",
        "peekOfCode": "number = int(input(\"Enter a number: \"))\nif number > 0:\n    print(f\"{number} is a positive number.\")\nelif number < 0:\n    print(f\"{number} is a negative number.\")\nelse:\n    print(\"The number is zero.\")",
        "detail": "leap_year_plus_another.positive_number",
        "documentation": {}
    },
    {
        "label": "is_leap_year",
        "kind": 2,
        "importPath": "leap_year_plus_another.tempCodeRunnerFile",
        "description": "leap_year_plus_another.tempCodeRunnerFile",
        "peekOfCode": "def is_leap_year(year):\n#     if year % 4 == 0:\n#         if year % 100 == 0:\n#             if year % 400 == 0:\n#                 return True\n#             else:\n#                 return False\n#         else:\n#             return True\n#     else:",
        "detail": "leap_year_plus_another.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "class Phone:\n    price = 12000\n    color = 'blue'\n    brand = 'samsung'\n    features = ['camera', 'speaker', 'hammer']\n    def call(self):\n        print('calling one person')\n    def send_sms(self, phone, sms):\n        text = f'sending SMS to: {phone} and message: {sms}'\n        return text",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "call",
        "kind": 2,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "def call():\n    print('calling someone i dont know')\n    return 'call done'\nclass Phone:\n    price = 12000\n    color = 'blue'\n    brand = 'samsung'\n    features = ['camera', 'speaker', 'hammer']\n    def call(self):\n        print('calling one person')",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "my_phone",
        "kind": 5,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "my_phone = Phone()\nprint(my_phone.features)\nmy_phone.call()\nres = my_phone.send_sms(17, 'hello monirul')\nprint(res)",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "res",
        "kind": 5,
        "importPath": "oop.class_object.methods",
        "description": "oop.class_object.methods",
        "peekOfCode": "res = my_phone.send_sms(17, 'hello monirul')\nprint(res)",
        "detail": "oop.class_object.methods",
        "documentation": {}
    },
    {
        "label": "Phone",
        "kind": 6,
        "importPath": "oop.class_object.simple_class",
        "description": "oop.class_object.simple_class",
        "peekOfCode": "class Phone:\n    price = 5000\n    color = 'blue'\n    brand = 'samsung'\nmy_phone = Phone()\nprint(my_phone.price)",
        "detail": "oop.class_object.simple_class",
        "documentation": {}
    },
    {
        "label": "my_phone",
        "kind": 5,
        "importPath": "oop.class_object.simple_class",
        "description": "oop.class_object.simple_class",
        "peekOfCode": "my_phone = Phone()\nprint(my_phone.price)",
        "detail": "oop.class_object.simple_class",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "palindrome.palindrome",
        "description": "palindrome.palindrome",
        "peekOfCode": "def is_palindrome(s):\n    cleaned = ''.join(char.lower() for char in s if char.isalnum())\n    return cleaned == cleaned[::-1]\nstring = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(string))\ndef second_largest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort(reverse=True)\n    return unique_numbers[1] if len(unique_numbers) > 1 else None\nnums = [4, 1, 2, 2, 5, 5, 3]",
        "detail": "palindrome.palindrome",
        "documentation": {}
    },
    {
        "label": "second_largest",
        "kind": 2,
        "importPath": "palindrome.palindrome",
        "description": "palindrome.palindrome",
        "peekOfCode": "def second_largest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort(reverse=True)\n    return unique_numbers[1] if len(unique_numbers) > 1 else None\nnums = [4, 1, 2, 2, 5, 5, 3]\nprint(second_largest(nums))",
        "detail": "palindrome.palindrome",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "palindrome.palindrome",
        "description": "palindrome.palindrome",
        "peekOfCode": "string = \"A man, a plan, a canal: Panama\"\nprint(is_palindrome(string))\ndef second_largest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort(reverse=True)\n    return unique_numbers[1] if len(unique_numbers) > 1 else None\nnums = [4, 1, 2, 2, 5, 5, 3]\nprint(second_largest(nums))",
        "detail": "palindrome.palindrome",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "palindrome.palindrome",
        "description": "palindrome.palindrome",
        "peekOfCode": "nums = [4, 1, 2, 2, 5, 5, 3]\nprint(second_largest(nums))",
        "detail": "palindrome.palindrome",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "class Customer:\n    def __init__(self, name, email, address):\n        self.name = name\n        self.email = email\n        self.address = address\n        self.balance = 0\n        self.orders = []\n    def check_balance(self):\n        print(f\"Your current balance is: ${self.balance}\")\n    def add_funds(self):",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "class Admin:\n    def __init__(self, restaurant):\n        self.restaurant = restaurant\n    def add_customer(self):\n        name = input(\"Enter customer name: \")\n        email = input(\"Enter customer email: \")\n        address = input(\"Enter customer address: \")\n        customer = Customer(name, email, address)\n        self.restaurant.add_customer(customer)\n        print(f\"Customer {name} added successfully.\")",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "Restaurant",
        "kind": 6,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "class Restaurant:\n    def __init__(self):\n        self.menu = {}\n        self.customers = []\n    def manage_menu(self, item, price=None):\n        if price is None:\n            if item in self.menu:\n                del self.menu[item]\n                print(f\"Item '{item}' removed from menu.\")\n            else:",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "main_menu",
        "kind": 2,
        "importPath": "restaurant_management.restaurant",
        "description": "restaurant_management.restaurant",
        "peekOfCode": "def main_menu():\n    restaurant = Restaurant()\n    admin = Admin(restaurant)\n    customer = None\n    while True:\n        print(\"\\n--- Restaurant Management System ---\")\n        print(\"1. Admin Login\")\n        print(\"2. Customer Login\")\n        print(\"3. Exit\")\n        choice = input(\"Enter your choice: \")",
        "detail": "restaurant_management.restaurant",
        "documentation": {}
    },
    {
        "label": "display_menu",
        "kind": 2,
        "importPath": "todo_list.todo_list",
        "description": "todo_list.todo_list",
        "peekOfCode": "def display_menu():\n    print(\"\\nTo-Do List Menu\")\n    print(\"1. Add Task\")\n    print(\"2. View Tasks\")\n    print(\"3. Remove Task\")\n    print(\"4. Exit\")\ndef add_task(tasks):\n    task = input(\"Enter a new task: \")\n    tasks.append(task)\n    print(f\"'{task}' has been added to the list.\")",
        "detail": "todo_list.todo_list",
        "documentation": {}
    },
    {
        "label": "add_task",
        "kind": 2,
        "importPath": "todo_list.todo_list",
        "description": "todo_list.todo_list",
        "peekOfCode": "def add_task(tasks):\n    task = input(\"Enter a new task: \")\n    tasks.append(task)\n    print(f\"'{task}' has been added to the list.\")\ndef view_tasks(tasks):\n    if not tasks:\n        print(\"No tasks in the list.\")\n    else:\n        print(\"\\nYour Tasks:\")\n        for idx, task in enumerate(tasks, start=1):",
        "detail": "todo_list.todo_list",
        "documentation": {}
    },
    {
        "label": "view_tasks",
        "kind": 2,
        "importPath": "todo_list.todo_list",
        "description": "todo_list.todo_list",
        "peekOfCode": "def view_tasks(tasks):\n    if not tasks:\n        print(\"No tasks in the list.\")\n    else:\n        print(\"\\nYour Tasks:\")\n        for idx, task in enumerate(tasks, start=1):\n            print(f\"{idx}. {task}\")\ndef remove_task(tasks):\n    view_tasks(tasks)\n    if tasks:",
        "detail": "todo_list.todo_list",
        "documentation": {}
    },
    {
        "label": "remove_task",
        "kind": 2,
        "importPath": "todo_list.todo_list",
        "description": "todo_list.todo_list",
        "peekOfCode": "def remove_task(tasks):\n    view_tasks(tasks)\n    if tasks:\n        try:\n            task_num = int(input(\"Enter the number of the task to remove: \"))\n            removed_task = tasks.pop(task_num - 1)\n            print(f\"'{removed_task}' has been removed from the list.\")\n        except (ValueError, IndexError):\n            print(\"Invalid input. Please try again.\")\ndef main():",
        "detail": "todo_list.todo_list",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "todo_list.todo_list",
        "description": "todo_list.todo_list",
        "peekOfCode": "def main():\n    tasks = []\n    while True:\n        display_menu()\n        choice = input(\"Choose an option (1-4): \")\n        if choice == \"1\":\n            add_task(tasks)\n        elif choice == \"2\":\n            view_tasks(tasks)\n        elif choice == \"3\":",
        "detail": "todo_list.todo_list",
        "documentation": {}
    }
]