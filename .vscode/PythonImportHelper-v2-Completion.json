[
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "good_sequence",
        "kind": 2,
        "importPath": "codeforces_problem.good_sequence",
        "description": "codeforces_problem.good_sequence",
        "peekOfCode": "def good_sequence():\n    N = int(input())\n    a = list(map(int, input().split()))\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    removals = 0",
        "detail": "codeforces_problem.good_sequence",
        "documentation": {}
    },
    {
        "label": "split_balanced_strings",
        "kind": 2,
        "importPath": "codeforces_problem.max_split",
        "description": "codeforces_problem.max_split",
        "peekOfCode": "def split_balanced_strings():\n    S = input().strip()\n    count = 0\n    balance = 0\n    balanced_strings = []\n    current = \"\"\n    for char in S:\n        current += char\n        if char == 'L':\n            balance += 1",
        "detail": "codeforces_problem.max_split",
        "documentation": {}
    },
    {
        "label": "max_operations",
        "kind": 2,
        "importPath": "codeforces_problem.minimize_number",
        "description": "codeforces_problem.minimize_number",
        "peekOfCode": "def max_operations():\n    N = int(input())\n    A = list(map(int, input().split()))\n    operations = 0\n    while all(x % 2 == 0 for x in A):\n        A = [x // 2 for x in A]\n        operations += 1\n    print(operations)\nmax_operations()",
        "detail": "codeforces_problem.minimize_number",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "codeforces_problem.pyramid_py_auto_gui",
        "description": "codeforces_problem.pyramid_py_auto_gui",
        "peekOfCode": "num = 1\ntime.sleep(2)\nfor row in range(num):\n    for col in range(row + 1):\n        pyautogui.typewrite('#', interval=0.1)\n    pyautogui.press('enter')",
        "detail": "codeforces_problem.pyramid_py_auto_gui",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "codeforces_problem.tempCodeRunnerFile",
        "description": "codeforces_problem.tempCodeRunnerFile",
        "peekOfCode": "num = 5\n# for row in range(num):\n#     for col in range(row+1):\n#         print('#', end='')\n#     print()",
        "detail": "codeforces_problem.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "print_diamond",
        "kind": 2,
        "importPath": "day1.print_pattern",
        "description": "day1.print_pattern",
        "peekOfCode": "def print_diamond(n):\n    for i in range(1, n + 1):\n        print(\" \" * (n - i) + \"#\" * (2 * i - 1))\n    for i in range(n - 1, 0, -1):\n        print(\" \" * (n - i) + \"#\" * (2 * i - 1))\nn = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.print_pattern",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "day1.print_pattern",
        "description": "day1.print_pattern",
        "peekOfCode": "n = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.print_pattern",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "day1.tempCodeRunnerFile",
        "description": "day1.tempCodeRunnerFile",
        "peekOfCode": "n = int(input(\"Enter the size of the diamond: \"))\nprint_diamond(n)",
        "detail": "day1.tempCodeRunnerFile",
        "documentation": {}
    },
    {
        "label": "swap_array",
        "kind": 2,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "def swap_array(arr):\n    n = len(arr)\n    for i in range(n//2):\n        arr[i], arr[n-i-1] = arr[n-i-1], arr[i]\nmy_array = [1, 2, 3, 4, 5, 6]\nswap_array(my_array)\n# print(my_array)\nmy_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "my_array",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "my_array = [1, 2, 3, 4, 5, 6]\nswap_array(my_array)\n# print(my_array)\nmy_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "my_string = \"who is jim\"\nword_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "word_to_check",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "word_to_check = \"jim\"\nif word_to_check in my_string:\n    print(f\"The word '{word_to_check}' is present in the string.\")\nelse:\n    print(f\"The word '{word_to_check}' is not present in the string.\")\nsum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 5,
        "importPath": "day2.array_swap",
        "description": "day2.array_swap",
        "peekOfCode": "sum = 0\nfor i in range(50):\n    sum = sum+i\nprint(sum)",
        "detail": "day2.array_swap",
        "documentation": {}
    }
]